// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  avatarUrl String?
  recipes   Recipe[]
  plans     Plan[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([createdAt])
}

model Recipe {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  contributor  String
  prepTime     Int?      // Minutes - positive values only
  servings     Int?      // Number of servings - positive values only  
  course       String?
  cuisine      String?
  difficulty   String?   // Easy, Medium, Hard
  ingredients  String    // JSON string array
  instructions String    // JSON string array
  tags         String    // JSON string array
  summary      String
  story        String?
  imageUrl     String
  imageHint    String
  audioUrl     String?
  originName   String?   // Name of place/region of origin
  originLat    Float?    // Latitude of origin location
  originLng    Float?    // Longitude of origin location
  parentId     String?   // Reference to parent recipe for variations
  parent       Recipe?   @relation("RecipeVariations", fields: [parentId], references: [id])
  variations   Recipe[]  @relation("RecipeVariations")
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plans        Plan[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([course])
  @@index([cuisine])
  @@index([difficulty])
  @@index([tags])
}

model Plan {
  id         String   @id @default(cuid())
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  plannedFor DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([recipeId, plannedFor, userId])
  @@index([userId])
  @@index([plannedFor])
  @@index([recipeId])
}
