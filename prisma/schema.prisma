// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  SUPPORT_ADMIN
  CONTENT_ADMIN
  SUPER_ADMIN
}

enum HouseholdRole {
  OWNER        // You - full control
  CURATOR      // Siblings - can edit and curate
  CONTRIBUTOR  // Any adult - can add recipes
  KID          // Can react, can't edit
}

model User {
  id                  String          @id @default(cuid())
  email               String          @unique
  password            String
  name                String?
  avatarUrl           String?
  bio                 String?
  role                UserRole        @default(USER)
  householdRole       HouseholdRole   @default(CONTRIBUTOR)
  householdId         String?         // Link to household
  household           Household?      @relation(fields: [householdId], references: [id])
  isActive            Boolean         @default(true)
  lastLogin           DateTime?
  openaiApiKey        String?         // Encrypted API key for OpenAI services
  twoFactorSecret     String?         // Encrypted TOTP secret for 2FA
  twoFactorEnabled    Boolean         @default(false)
  twoFactorVerifiedAt DateTime?       // Last 2FA verification timestamp
  recipes             Recipe[]
  plans               Plan[]
  mealPlans           MealPlan[]      @relation("UserMealPlans")
  shoppingLists       ShoppingList[]  @relation("UserShoppingLists")
  mealTemplates       MealTemplate[]  @relation("UserMealTemplates")
  nutritionGoals      NutritionGoal[] @relation("UserNutritionGoals")
  favorites           FavoriteRecipe[] @relation("UserFavorites")
  reactions           RecipeReaction[] @relation("UserReactions")
  auditLogs           AuditLog[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@index([email])
  @@index([createdAt])
  @@index([role])
  @@index([householdId])
  @@index([householdRole])
}

model Recipe {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  contributor     String
  prepTime        Int?      // Minutes - positive values only
  servings        Int?      // Number of servings - positive values only
  course          String?
  cuisine         String?
  difficulty      String?   // Easy, Medium, Hard
  ingredients     String    // JSON string array
  instructions    String    // JSON string array
  tags            String    // JSON string array
  summary         String
  story           String?
  // Heirloom Story Fields
  originStory     String?   // Rich text origin story
  photoUrl        String?   // Primary heirloom photo
  voiceNoteUrl    String?   // Voice note URL for personal narration
  voiceNoteDuration Int?    // Duration in seconds
  // Allergy & Substitution Tags
  allergyTags     String?   // JSON: ["peanut-free", "gluten-free", "dairy-free"]
  substitutions   String?   // JSON: [{ from: "butter", to: "coconut oil", note: "Grandma's gluten-swap" }]
  dietaryFlags    String?   // JSON: ["vegetarian", "vegan", "keto", "paleo"]
  imageUrl        String
  imageHint       String
  audioUrl        String?
  originName      String?   // Name of place/region of origin
  originLat       Float?    // Latitude of origin location
  originLng       Float?    // Longitude of origin location
  parentId        String?   // Reference to parent recipe for variations
  parent          Recipe?   @relation("RecipeVariations", fields: [parentId], references: [id])
  variations      Recipe[]  @relation("RecipeVariations")
  // Nutrition information (per serving)
  servingSize     String?   // e.g., "1 cup", "2 pieces"
  calories        Int?      // kcal per serving
  protein         Float?    // grams per serving
  carbs           Float?    // grams per serving
  fat             Float?    // grams per serving
  fiber           Float?    // grams per serving
  sugar           Float?    // grams per serving
  sodium          Int?      // mg per serving
  isFeatured      Boolean   @default(false) // Featured in family foyer
  featuredAt      DateTime? // When it was featured
  // Cooking Mode Support
  stepTimers      String?   // JSON: [{ step: 1, duration: 600, label: "Simmer" }]
  voiceEnabled    Boolean   @default(true) // Enable voice navigation
  // Offline & Print
  prefetchPriority Int      @default(0) // Higher = prefetch first for offline
  printFriendly   Boolean   @default(true)
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plans           Plan[]
  plannedMeals    PlannedMeal[] @relation("PlannedMealRecipes")
  favorites       FavoriteRecipe[] @relation("RecipeFavorites")
  reactions       RecipeReaction[] @relation("RecipeReactions")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([course])
  @@index([cuisine])
  @@index([difficulty])
  @@index([tags])
  @@index([isFeatured])
  @@index([allergyTags])
  @@index([dietaryFlags])
  @@index([prefetchPriority])
}

model Plan {
  id         String   @id @default(cuid())
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  plannedFor DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([recipeId, plannedFor, userId])
  @@index([userId])
  @@index([plannedFor])
  @@index([recipeId])
}

model FavoriteRecipe {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation("RecipeFavorites", fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model MealPlan {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation("UserMealPlans", fields: [userId], references: [id], onDelete: Cascade)
  name      String        // e.g., "Summer Week 1", "Low-Carb July"
  startDate DateTime
  endDate   DateTime
  isActive  Boolean       @default(true)
  meals     PlannedMeal[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([startDate])
  @@index([isActive])
}

model PlannedMeal {
  id                String    @id @default(cuid())
  mealPlanId        String
  mealPlan          MealPlan  @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  date              DateTime
  mealType          MealType
  recipeId          String?
  recipe            Recipe?   @relation("PlannedMealRecipes", fields: [recipeId], references: [id], onDelete: SetNull)
  customMealName    String?   // For meals without a recipe
  servings          Int       @default(4)
  notes             String?
  isCompleted       Boolean   @default(false)
  weatherAtPlanning Json?     // Store weather snapshot: { temp: number, condition: string, precipitation: number }
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([mealPlanId])
  @@index([date])
  @@index([recipeId])
  @@index([mealType])
}

model ShoppingList {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserShoppingLists", fields: [userId], references: [id], onDelete: Cascade)
  mealPlanId  String?  // Optional: can be standalone or linked to meal plan
  name        String   @default("Shopping List")
  items       Json     // Array of { ingredient: string, quantity: string, unit: string, recipeIds: string[], isChecked: boolean, category: string }
  generatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([mealPlanId])
}

model MealTemplate {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserMealTemplates", fields: [userId], references: [id], onDelete: Cascade)
  name      String   // e.g., "Typical Monday", "Weekend Breakfast"
  meals     Json     // Array of { mealType: MealType, recipeId: string, servings: number }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model WeatherCache {
  id          String   @id @default(cuid())
  date        DateTime @unique
  latitude    Float
  longitude   Float
  temperature Json     // { high: number, low: number, current: number }
  condition   String   // sunny, cloudy, rainy, etc.
  description String?  // Detailed description
  precipitation Float  @default(0) // Percentage
  humidity    Int?
  windSpeed   Float?
  icon        String?  // Weather icon code
  fetchedAt   DateTime @default(now())
  
  @@index([date])
  @@index([fetchedAt])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String   // CREATE, UPDATE, DELETE, VIEW, etc.
  entityType  String   // User, Recipe, Collection, Settings, etc.
  entityId    String?
  changes     Json?    // Before/after values for updates
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
  @@index([entityType])
  @@index([action])
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  category    String   // General, API, Email, Security, etc.
  description String?
  dataType    String   @default("string") // string, number, boolean, json
  isPublic    Boolean  @default(false)
  updatedBy   String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  
  @@index([category])
  @@index([key])
}

model FeatureFlag {
  id                String   @id @default(cuid())
  name              String   @unique
  enabled           Boolean  @default(false)
  description       String?
  rolloutPercentage Int      @default(100)
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  @@index([name])
  @@index([enabled])
}

model NutritionGoal {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation("UserNutritionGoals", fields: [userId], references: [id], onDelete: Cascade)
  name          String?  // e.g., "Weight Loss", "Muscle Gain", "Maintenance"
  targetCalories Int     // Daily calorie target
  targetProtein  Float?  // Daily protein target (grams)
  targetCarbs    Float?  // Daily carbs target (grams)
  targetFat      Float?  // Daily fat target (grams)
  targetFiber    Float?  // Daily fiber target (grams)
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([isActive])
  @@index([startDate])
}

model AdminIpAllowlist {
  id          String   @id @default(cuid())
  ipAddress   String   @unique
  description String?  // Who or what this IP is for
  addedBy     String   // User ID of SUPER_ADMIN who added it
  isActive    Boolean  @default(true)
  expiresAt   DateTime? // Optional expiration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ipAddress])
  @@index([isActive])
}

model CsrfToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model AuditWebhook {
  id          String   @id @default(cuid())
  name        String
  url         String
  secret      String?  // Optional signing secret
  events      String[] // Array of event types to listen for
  isActive    Boolean  @default(true)
  lastTrigger DateTime?
  failureCount Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String   // Hashed password for comparison
  createdAt    DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
}

model LoginAttempt {
  id          String   @id @default(cuid())
  userId      String?  // Null if user not found
  email       String
  ipAddress   String
  userAgent   String?
  successful  Boolean
  failureReason String? // "invalid_password", "account_locked", "user_not_found", etc.
  location    Json?    // { country, city, lat, lng } based on IP geolocation
  deviceInfo  Json?    // { browser, os, device }
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([email])
  @@index([ipAddress])
  @@index([createdAt])
  @@index([successful])
}

model WebAuthnCredential {
  id              String   @id @default(cuid())
  userId          String
  credentialId    String   @unique // Base64URL encoded credential ID
  publicKey       String   // Base64URL encoded public key
  counter         BigInt   @default(0) // Signature counter for replay protection
  transports      String[] // ["usb", "nfc", "ble", "internal"]
  deviceName      String?  // User-friendly name for the credential
  createdAt       DateTime @default(now())
  lastUsedAt      DateTime?
  
  @@index([userId])
  @@index([credentialId])
}

model WebAuthnChallenge {
  id        String   @id @default(cuid())
  userId    String?  // Null for registration challenges
  challenge String   @unique // Base64URL encoded challenge
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([challenge])
  @@index([userId])
  @@index([expiresAt])
}

model SecurityEvent {
  id          String   @id @default(cuid())
  userId      String?
  eventType   String   // "password_changed", "2fa_enabled", "login_anomaly", "account_locked", etc.
  severity    String   // "low", "medium", "high", "critical"
  description String
  metadata    Json?    // Additional event data
  ipAddress   String?
  userAgent   String?
  notified    Boolean  @default(false) // Whether webhook was triggered
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([eventType])
  @@index([severity])
  @@index([createdAt])
  @@index([notified])
}

// === FAMILY FEATURES ===

model Household {
  id          String   @id @default(cuid())
  name        String   // "The Smith Family"
  description String?
  members     User[]
  ownerId     String   // User ID of the owner
  // Family digest settings
  digestEnabled Boolean @default(true)
  digestDay    String  @default("sunday") // Day to send digest
  digestTime   String  @default("09:00")  // Time to send (HH:MM)
  // Birthday tracking
  birthdays    Json?   // [{ name: "Mom", date: "05-15", notify: true }]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([ownerId])
}

model RecipeReaction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserReactions", fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation("RecipeReactions", fields: [recipeId], references: [id], onDelete: Cascade)
  emoji     String   // "❤️", "😋", "🔥", "👍", etc.
  comment   String?  // Optional comment from kids
  createdAt DateTime @default(now())
  
  @@unique([userId, recipeId, emoji])
  @@index([userId])
  @@index([recipeId])
  @@index([createdAt])
}

model FamilyDigest {
  id              String   @id @default(cuid())
  householdId     String
  weekStartDate   DateTime
  weekEndDate     DateTime
  newRecipeCount  Int      @default(0)
  plannedMealsCount Int    @default(0)
  upcomingBirthdays Json?  // [{ name: "Dad", date: "2025-10-20", daysUntil: 5 }]
  highlightRecipeIds Json? // Array of featured recipe IDs
  sentAt          DateTime?
  emailStatus     String   @default("pending") // pending, sent, failed
  createdAt       DateTime @default(now())
  
  @@index([householdId])
  @@index([weekStartDate])
  @@index([emailStatus])
}

model CookingSession {
  id            String   @id @default(cuid())
  userId        String
  recipeId      String
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  currentStep   Int      @default(0)
  voiceEnabled  Boolean  @default(false)
  timersActive  Json?    // [{ stepIndex: 2, startTime: ISO, duration: 600 }]
  notes         String?  // User notes during cooking
  
  @@index([userId])
  @@index([recipeId])
  @@index([startedAt])
}
