// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  SUPPORT_ADMIN
  CONTENT_ADMIN
  SUPER_ADMIN
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  name          String?
  avatarUrl     String?
  bio           String?
  role          UserRole        @default(USER)
  isActive      Boolean         @default(true)
  lastLogin     DateTime?
  openaiApiKey  String?         // Encrypted API key for OpenAI services
  recipes       Recipe[]
  plans         Plan[]
  mealPlans     MealPlan[]      @relation("UserMealPlans")
  shoppingLists ShoppingList[]  @relation("UserShoppingLists")
  mealTemplates MealTemplate[]  @relation("UserMealTemplates")
  nutritionGoals NutritionGoal[] @relation("UserNutritionGoals")
  auditLogs     AuditLog[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([email])
  @@index([createdAt])
  @@index([role])
}

model Recipe {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  contributor  String
  prepTime     Int?      // Minutes - positive values only
  servings     Int?      // Number of servings - positive values only
  course       String?
  cuisine      String?
  difficulty   String?   // Easy, Medium, Hard
  ingredients  String    // JSON string array
  instructions String    // JSON string array
  tags         String    // JSON string array
  summary      String
  story        String?
  imageUrl     String
  imageHint    String
  audioUrl     String?
  originName   String?   // Name of place/region of origin
  originLat    Float?    // Latitude of origin location
  originLng    Float?    // Longitude of origin location
  parentId     String?   // Reference to parent recipe for variations
  parent       Recipe?   @relation("RecipeVariations", fields: [parentId], references: [id])
  variations   Recipe[]  @relation("RecipeVariations")
  // Nutrition information (per serving)
  servingSize  String?   // e.g., "1 cup", "2 pieces"
  calories     Int?      // kcal per serving
  protein      Float?    // grams per serving
  carbs        Float?    // grams per serving
  fat          Float?    // grams per serving
  fiber        Float?    // grams per serving
  sugar        Float?    // grams per serving
  sodium       Int?      // mg per serving
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plans        Plan[]
  plannedMeals PlannedMeal[] @relation("PlannedMealRecipes")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([course])
  @@index([cuisine])
  @@index([difficulty])
  @@index([tags])
}

model Plan {
  id         String   @id @default(cuid())
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  plannedFor DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([recipeId, plannedFor, userId])
  @@index([userId])
  @@index([plannedFor])
  @@index([recipeId])
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model MealPlan {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation("UserMealPlans", fields: [userId], references: [id], onDelete: Cascade)
  name      String        // e.g., "Summer Week 1", "Low-Carb July"
  startDate DateTime
  endDate   DateTime
  isActive  Boolean       @default(true)
  meals     PlannedMeal[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([startDate])
  @@index([isActive])
}

model PlannedMeal {
  id                String    @id @default(cuid())
  mealPlanId        String
  mealPlan          MealPlan  @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  date              DateTime
  mealType          MealType
  recipeId          String?
  recipe            Recipe?   @relation("PlannedMealRecipes", fields: [recipeId], references: [id], onDelete: SetNull)
  customMealName    String?   // For meals without a recipe
  servings          Int       @default(4)
  notes             String?
  isCompleted       Boolean   @default(false)
  weatherAtPlanning Json?     // Store weather snapshot: { temp: number, condition: string, precipitation: number }
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([mealPlanId])
  @@index([date])
  @@index([recipeId])
  @@index([mealType])
}

model ShoppingList {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserShoppingLists", fields: [userId], references: [id], onDelete: Cascade)
  mealPlanId  String?  // Optional: can be standalone or linked to meal plan
  name        String   @default("Shopping List")
  items       Json     // Array of { ingredient: string, quantity: string, unit: string, recipeIds: string[], isChecked: boolean, category: string }
  generatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([mealPlanId])
}

model MealTemplate {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserMealTemplates", fields: [userId], references: [id], onDelete: Cascade)
  name      String   // e.g., "Typical Monday", "Weekend Breakfast"
  meals     Json     // Array of { mealType: MealType, recipeId: string, servings: number }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model WeatherCache {
  id          String   @id @default(cuid())
  date        DateTime @unique
  latitude    Float
  longitude   Float
  temperature Json     // { high: number, low: number, current: number }
  condition   String   // sunny, cloudy, rainy, etc.
  description String?  // Detailed description
  precipitation Float  @default(0) // Percentage
  humidity    Int?
  windSpeed   Float?
  icon        String?  // Weather icon code
  fetchedAt   DateTime @default(now())
  
  @@index([date])
  @@index([fetchedAt])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String   // CREATE, UPDATE, DELETE, VIEW, etc.
  entityType  String   // User, Recipe, Collection, Settings, etc.
  entityId    String?
  changes     Json?    // Before/after values for updates
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
  @@index([entityType])
  @@index([action])
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  category    String   // General, API, Email, Security, etc.
  description String?
  dataType    String   @default("string") // string, number, boolean, json
  isPublic    Boolean  @default(false)
  updatedBy   String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  
  @@index([category])
  @@index([key])
}

model FeatureFlag {
  id                String   @id @default(cuid())
  name              String   @unique
  enabled           Boolean  @default(false)
  description       String?
  rolloutPercentage Int      @default(100)
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  @@index([name])
  @@index([enabled])
}

model NutritionGoal {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation("UserNutritionGoals", fields: [userId], references: [id], onDelete: Cascade)
  name          String?  // e.g., "Weight Loss", "Muscle Gain", "Maintenance"
  targetCalories Int     // Daily calorie target
  targetProtein  Float?  // Daily protein target (grams)
  targetCarbs    Float?  // Daily carbs target (grams)
  targetFat      Float?  // Daily fat target (grams)
  targetFiber    Float?  // Daily fiber target (grams)
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([isActive])
  @@index([startDate])
}
